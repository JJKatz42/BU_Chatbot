# coding: utf-8

"""
    Chatbot API with Google Authentication

    An API for interacting with our chatbot, providing feedback, and managing sessions.  # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeedbackRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_id': 'str',
        'liked': 'bool'
    }

    attribute_map = {
        'response_id': 'responseID',
        'liked': 'liked'
    }

    def __init__(self, response_id=None, liked=None):  # noqa: E501
        """FeedbackRequest - a model defined in Swagger"""  # noqa: E501
        self._response_id = None
        self._liked = None
        self.discriminator = None
        if response_id is not None:
            self.response_id = response_id
        if liked is not None:
            self.liked = liked

    @property
    def response_id(self):
        """Gets the response_id of this FeedbackRequest.  # noqa: E501

        The ID of the response being rated.  # noqa: E501

        :return: The response_id of this FeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_id

    @response_id.setter
    def response_id(self, response_id):
        """Sets the response_id of this FeedbackRequest.

        The ID of the response being rated.  # noqa: E501

        :param response_id: The response_id of this FeedbackRequest.  # noqa: E501
        :type: str
        """

        self._response_id = response_id

    @property
    def liked(self):
        """Gets the liked of this FeedbackRequest.  # noqa: E501

        True if the user liked the response, false otherwise.  # noqa: E501

        :return: The liked of this FeedbackRequest.  # noqa: E501
        :rtype: bool
        """
        return self._liked

    @liked.setter
    def liked(self, liked):
        """Sets the liked of this FeedbackRequest.

        True if the user liked the response, false otherwise.  # noqa: E501

        :param liked: The liked of this FeedbackRequest.  # noqa: E501
        :type: bool
        """

        self._liked = liked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeedbackRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedbackRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
